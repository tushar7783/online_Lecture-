Integrating Sequelize ORM with Node.js involves the following steps:


---

1. Install Required Packages

Run the following commands in your project directory:

npm install sequelize sequelize-cli mysql2

sequelize: The Sequelize ORM library.

sequelize-cli: Command-line interface for Sequelize.

mysql2: MySQL driver (use pg/pg-hstore for PostgreSQL, sqlite3 for SQLite, or mssql for MSSQL).



---

2. Initialize Sequelize

Use the Sequelize CLI to generate the necessary folder structure:

npx sequelize-cli init

This will create the following structure:

- config/
  - config.json
- models/
  - index.js
- migrations/
- seeders/


---

3. Configure Database Connection

Edit config/config.json to set up your database configuration:

{
  "development": {
    "username": "your_username",
    "password": "your_password",
    "database": "your_database",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "your_username",
    "password": "your_password",
    "database": "test_database",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "your_username",
    "password": "your_password",
    "database": "prod_database",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

Replace your_username, your_password, and your_database with your database credentials.


---

4. Define a Model

Generate a model using Sequelize CLI:

npx sequelize-cli model:generate --name User --attributes name:string,email:string

This will:

Create a User model in models/user.js.

Generate a migration file in the migrations/ folder.



---

5. Run Migrations

Apply the migration to create the table in the database:

npx sequelize-cli db:migrate


---

6. Use the Model in Your Code

You can now use the generated model in your application.

Example: app.js

const express = require('express');
const { User } = require('./models');

const app = express();
app.use(express.json());

// Create a new user
app.post('/users', async (req, res) => {
  try {
    const user = await User.create(req.body);
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get all users
app.get('/users', async (req, res) => {
  try {
    const users = await User.findAll();
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

const PORT = 3000;
app.listen(PORT, () => console.log(Server running on port ${PORT}));


---

7. Additional Sequelize CLI Commands

Rollback migrations:

npx sequelize-cli db:migrate:undo

Seed the database with data:

npx sequelize-cli seed:generate --name demo-user
npx sequelize-cli db:seed:all



---

8. Sequelize with TypeScript (Optional)

For TypeScript support, install the following:

npm install --save-dev @types/sequelize

Sequelize offers full TypeScript support, requiring you to define model attributes as types.


---

This setup will enable you to effectively use Sequelize ORM with Node.js for database interactions.